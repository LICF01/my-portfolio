---
import { Icon } from "astro-icon";
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";

import Button from "@/components/ui/Button.astro";
import Divider from "@/components/ui/Divider.astro";
import SpotlightCard from "@/components/ui/SpotlightCard.astro";
import Technologies from "@/components/ui/Technologies.astro";
import Text from "@/components/ui/Text.astro";

import { formatDate } from "@/utils/date";

type collectionData = CollectionEntry<"projects">["data"];

const { data, linksLabels } = Astro.props as {
  data: collectionData;
  linksLabels: { sourceCode: string; liveDemo: string };
};
---

<SpotlightCard>
  {
    data.cover?.src && (
      <Image
        slot="image"
        src={data.cover}
        alt={data.coverAlt ?? "Project cover"}
        class="opacity-80 object-cover"
      />
    )
  }

  <Text as="p" class="mt-0 text-sm pb-2">
    {formatDate(data.date)}
  </Text>
  <Text as="h3" variant="lead" class="text-foreground/90">
    {data.title}
  </Text>
  <Text as="p" variant="paragraph" class="lg:min-h-[85px]">
    {data.description}
  </Text>
  <div class="flex mt-2 lg:mt-4 gap-2">
    {
      data.links.map((link: collectionData["links"][0]) => (
        <Button
          as="a"
          variant="ghost"
          href={link?.url}
          target="_blank"
          rel="noopener noreferrer"
          class="p-2 text-sm font-normal"
        >
          <Icon
            id="lightIcon"
            name={
              link?.linkType === "source-code"
                ? "codicon:git-merge"
                : "codicon:globe"
            }
            class="w-6 h-6 pr-2"
          />
          {link?.linkType === "source-code"
            ? linksLabels.sourceCode
            : linksLabels.liveDemo}
        </Button>
      ))
    }
  </div>
  <Divider class="my-2 mb-4" />
  <Technologies data={data.technologies} />
</SpotlightCard>
