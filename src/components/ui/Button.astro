---
import type { HTMLTag, Polymorphic } from "astro/types";
import { cva } from "class-variance-authority";
import { twMerge } from "tailwind-merge";

type ComponentProps = {
  id?: string;
  variant?: "ghost" | "outline" | "outline-dimmed" | "link";
  size?: "sm" | "md" | "lg" | "icon";
  class?: string;
  as: "a" | "button";
};

const buttonVariants = cva(
  "inline-flex items-center justify-center  text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 cursor-pointer",
  {
    variants: {
      variant: {
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-white/10 hover:text-accent-foreground",
        "outline-dimmed":
          "text-white/30 border border-white/10 rounded-lg px-2 cursor-pointer hover:bg-white/10 hover:text-white/50",
        ghost:
          "text-primary-foreground hover:bg-white/10 hover:text-accent-foreground",
        link: "text-primary-foreground hover:underline hover:text-primary",
      },
      size: {
        sm: "h-8 rounded-md px-3 text-xs",
        md: "h-9 px-4 py-2 rounded-md",
        lg: "h-10 rounded-md px-8",
      },
    },
    defaultVariants: { variant: "outline", size: "md" },
  },
);

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & ComponentProps;

const { variant, size, class: className, as: Tag, ...rest } = Astro.props;
---

<Tag class={twMerge(buttonVariants({ variant, size, className }))} {...rest}>
  <slot />
</Tag>
