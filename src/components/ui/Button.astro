---
import type { HTMLTag, Polymorphic } from "astro/types";
import { cva } from "class-variance-authority";
import { twMerge } from "tailwind-merge";

type ComponentProps = {
  id?: string;
  variant?: "ghost" | "outline" | "outline-dimmed" | "link" | "filled";
  class?: string;
  as: "a" | "button";
};

const buttonVariants = cva(
  "text-foreground/70 inline-flex items-center justify-center text-sm px-4 py-2 rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 cursor-pointer",
  {
    variants: {
      variant: {
        filled: "bg-accent/70  shadow hover:bg-accent text-foreground",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-foreground/10",
        "outline-dimmed":
          "border border-foreground/20 rounded-lg cursor-pointer hover:bg-foreground/10",
        ghost: "hover:bg-foreground/10",
        link: "hover:underline",
      },
    },
    defaultVariants: { variant: "outline" },
  },
);

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & ComponentProps;

const { variant, size, class: className, as: Tag, ...rest } = Astro.props;
---

<Tag class={twMerge(buttonVariants({ variant, size, className }))} {...rest}>
  <slot />
</Tag>
