---
import type { HTMLAttributes, HTMLTag, Polymorphic } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import { twMerge } from "tailwind-merge";

type ComponentProps = {
  id?: string;
  variant?: "normal" | "title" | "hero" | "lead" | "paragraph";
  class?: string;
  as: "p" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
};

const textVariants = cva("text-white/50 text-left font-light", {
  variants: {
    variant: {
      hero: "text-4xl md:text-6xl leading-[5rem] text-white/80",
      title: "text-4xl font-medium uppercase text-white/80",
      lead: "text-2xl md:text-2xl text-white/80",
      medium: "text-left text-lg lg:text-xl",
      normal: "leading-7 text-white/50 mt-4",
      paragraph: "leading-7 text-white/50 [&:not(:first-child)]:mt-4",
    },
  },
  defaultVariants: { variant: "normal" },
});

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & ComponentProps;

const { variant, size, class: className, as: Tag, ...rest } = Astro.props;
---

<Tag class={twMerge(textVariants({ variant, className }))}>
  <slot />
</Tag>
